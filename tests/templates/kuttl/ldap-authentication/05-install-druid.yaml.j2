---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
metadata:
  name: install-druid
timeout: 600
---
apiVersion: authentication.stackable.tech/v1alpha1
kind: AuthenticationClass
metadata:
  name: druid-ldap-auth-class
spec:
  provider:
    ldap:
      hostname: openldap
      searchBase: ou=users,dc=example,dc=org
      searchFilter: (uid=%s)
{% if test_scenario['values']['ldap-use-tls'] == 'false' %}
      port: 1389
{% else %}
      port: 1636
      tls:
        verification:
          server:
            caCert:
              secretClass: openldap-tls
{% endif %}
      bindCredentials:
        secretClass: druid-ldap-secret
---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: druid-ldap-secret
spec:
  backend:
    k8sSearch:
      searchNamespace:
        pod: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: druid-ldap-secret
  labels:
    secrets.stackable.tech/class: druid-ldap-secret
stringData:
  user: uid=admin,dc=example,dc=org
  password: admin
---
apiVersion: druid.stackable.tech/v1alpha1
kind: DruidCluster
metadata:
  name: derby-druid
spec:
  image:
    productVersion: "{{ test_scenario['values']['druid'].split('-stackable')[0] }}"
    stackableVersion: "{{ test_scenario['values']['druid'].split('-stackable')[1] }}"
  clusterConfig:
    authentication:
      - authenticationClass: druid-ldap-auth-class
    deepStorage:
      hdfs:
        configMapName: druid-hdfs
        directory: /druid
    metadataStorageDatabase:
      dbType: derby
      connString: jdbc:derby://localhost:1527/var/druid/metadata.db;create=true
      host: localhost
      port: 1527
    tls:
      serverAndInternalSecretClass: null
    zookeeperConfigMapName: druid-znode
  brokers:
    roleGroups:
      default:
        replicas: 1
  coordinators:
    roleGroups:
      default:
        replicas: 1
  historicals:
    roleGroups:
      default:
        replicas: 1
  middleManagers:
    roleGroups:
      default:
        replicas: 1
  routers:
    roleGroups:
      default:
        replicas: 1
