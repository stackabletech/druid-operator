---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
metadata:
  name: install-druid
timeout: 600
---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: druid-s3-credentials
spec:
  backend:
    k8sSearch:
      searchNamespace:
        pod: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: druid-s3-credentials
  labels:
    secrets.stackable.tech/class: druid-s3-credentials
stringData:
  accessKey: druid
  secretKey: druiddruid
---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: druid-tls
spec:
  backend:
    autoTls:
      ca:
        secret:
          name: secret-provisioner-druid-tls-ca
          namespace: default
        autoGenerate: true
---
apiVersion: authentication.stackable.tech/v1alpha1
kind: AuthenticationClass
metadata:
  name: druid-tls-auth-class
spec:
  provider:
    tls:
      clientCertSecretClass: druid-tls # This SecretClass must match the SecretClass used for internal Druid communication
---
apiVersion: druid.stackable.tech/v1alpha1
kind: DruidCluster
metadata:
  name: derby-druid
spec:
  image:
    productVersion: "{{ test_scenario['values']['druid-latest'].split('-stackable')[0] }}"
    stackableVersion: "{{ test_scenario['values']['druid-latest'].split('-stackable')[1] }}"
  clusterConfig:
{% if test_scenario['values']['tls-mode'] == 'internal-and-server-tls-and-tls-client-auth' %}
    authentication:
      - authenticationClass: druid-tls-auth-class
{% endif %}
    deepStorage:
      s3:
        bucket:
          inline:
            bucketName: druid
            connection:
              inline:
                host: minio-druid
                port: 9000
                accessStyle: Path
                credentials:
                  secretClass: druid-s3-credentials
                tls:
                  verification:
                    server:
                      caCert:
                        secretClass: minio-druid-tls-certificates
        baseKey: deep-storage
    metadataStorageDatabase:
      dbType: derby
      connString: jdbc:derby://localhost:1527/var/druid/metadata.db;create=true
      host: localhost
      port: 1527
{% if test_scenario['values']['tls-mode'] == 'internal-and-server-tls' or test_scenario['values']['tls-mode'] == 'internal-and-server-tls-and-tls-client-auth' %}
    tls:
      serverAndInternalSecretClass: druid-tls
{% else  %}
    tls: null
{% endif %}
{% if lookup('env', 'VECTOR_AGGREGATOR') %}
    vectorAggregatorConfigMapName: vector-aggregator-discovery
{% endif %}
    zookeeperConfigMapName: druid-znode
  brokers:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
  coordinators:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
  historicals:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
  middleManagers:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
  routers:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
