---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: druid-s3-credentials
spec:
  backend:
    k8sSearch:
      searchNamespace:
        pod: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: druid-s3-credentials
  labels:
    secrets.stackable.tech/class: druid-s3-credentials
stringData:
  accessKey: druid
  secretKey: druiddruid
---
apiVersion: druid.stackable.tech/v1alpha1
kind: DruidCluster
metadata:
  name: druid
spec:
  image:
    productVersion: "{{ test_scenario['values']['druid'] }}"
    pullPolicy: IfNotPresent
  clusterConfig:
    additionalExtensions:
    - druid-pac4j
    listenerClass: external-unstable
    deepStorage:
      s3:
        bucket:
          inline:
            bucketName: druid
            connection:
              inline:
                host: minio-druid
                port: 9000
                accessStyle: Path
                credentials:
                  secretClass: druid-s3-credentials
{% if test_scenario['values']['s3-use-tls'] == 'true' %}
                tls:
                  verification:
                    server:
                      caCert:
                        secretClass: minio-tls-certificates
{% endif %}
        baseKey: deep-storage
    metadataStorageDatabase:
      dbType: derby
      connString: jdbc:derby://localhost:1527/var/druid/metadata.db;create=true
      host: localhost
      port: 1527
{% if lookup('env', 'VECTOR_AGGREGATOR') %}
    vectorAggregatorConfigMapName: vector-aggregator-discovery
{% endif %}
    zookeeperConfigMapName: druid-znode
  brokers:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
    configOverrides:
      runtime.properties: &runtime-properties
        # basic authenticator needed for internal authentication among Druid processes
        # Trying to use the pac4j authenticator in the escalator below leads to 302 errors,
        # it seems like the Druid processes cannot handle the OIDC authentication flow.
        druid.auth.authenticator.DruidInternal.type: basic
        druid.auth.authenticator.DruidInternal.initialInternalClientPassword: '${env:DRUID_INTERNAL_PASSWORD}'
        druid.auth.authenticator.DruidInternal.skipOnFailure: "true"  # for any non system user, skip to the pac4j authenticator

        # pac4j authenticator
        druid.auth.authenticator.pac4j.type: pac4j
        # pac4j common config
        druid.auth.pac4j.cookiePassphrase: '${env:DRUID_COOKIE_PASSPHRASE}'
        # OIDC common config
        druid.auth.pac4j.oidc.clientID: '${env:DRUID_OIDC_CLIENT}'
        druid.auth.pac4j.oidc.clientSecret: '${env:DRUID_OIDC_CLIENT_SECRET}'
{% if test_scenario['values']['oidc-use-tls'] == 'true' %}
        druid.auth.pac4j.oidc.discoveryURI: 'https://keycloak.$NAMESPACE.svc.cluster.local:8443/realms/test/.well-known/openid-configuration'
{% else %}
        druid.auth.pac4j.oidc.discoveryURI: 'http://keycloak.$NAMESPACE.svc.cluster.local:8080/realms/test/.well-known/openid-configuration'
{% endif %}
        druid.auth.pac4j.oidc.oidcClaim: preferred_username

        druid.auth.authenticatorChain: '["DruidInternal","pac4j"]'

        druid.escalator.type: basic
        druid.escalator.internalClientUsername: druid_system
        druid.escalator.internalClientPassword: '${env:DRUID_INTERNAL_PASSWORD}'
    podOverrides: &pod-overrides
      spec:
        containers:
          - name: druid
            env:
              - name: DRUID_OIDC_CLIENT
                valueFrom:
                  secretKeyRef:
                    name: druid-oidc
                    key: DRUID_OIDC_CLIENT
              - name: DRUID_OIDC_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: druid-oidc
                    key: DRUID_OIDC_CLIENT_SECRET
              - name: DRUID_COOKIE_PASSPHRASE
                valueFrom:
                  secretKeyRef:
                    name: druid-oidc
                    key: DRUID_COOKIE_PASSPHRASE
              - name: DRUID_INTERNAL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: druid-internal-password
                    key: DRUID_INTERNAL_PASSWORD
  coordinators:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
    configOverrides:
      runtime.properties: *runtime-properties
    podOverrides: *pod-overrides
  historicals:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
    configOverrides:
      runtime.properties: *runtime-properties
    podOverrides: *pod-overrides
  middleManagers:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
    configOverrides:
      runtime.properties:
        druid.auth.authenticator.DruidInternal.type: basic
        druid.auth.authenticator.DruidInternal.initialInternalClientPassword: '${env:DRUID_INTERNAL_PASSWORD}' # Default password for internal 'druid_system' user
        druid.auth.authenticator.DruidInternal.skipOnFailure: "true" # for any non system user, skip to the pac4j authenticator
        druid.auth.authenticatorChain: '["DruidInternal"]'
        druid.escalator.type: basic
        druid.escalator.internalClientUsername: druid_system
        druid.escalator.internalClientPassword: '${env:DRUID_INTERNAL_PASSWORD}'
    podOverrides:
      spec:
        containers:
          - name: druid
            env:
              - name: DRUID_INTERNAL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: druid-internal-password
                    key: DRUID_INTERNAL_PASSWORD
  routers:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
    configOverrides:
      runtime.properties: *runtime-properties
    podOverrides: *pod-overrides
