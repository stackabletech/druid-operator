---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: druid-s3-credentials
spec:
  backend:
    k8sSearch:
      searchNamespace:
        pod: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: druid-s3-credentials
  labels:
    secrets.stackable.tech/class: druid-s3-credentials
stringData:
  accessKey: druid
  secretKey: druiddruid
---
apiVersion: druid.stackable.tech/v1alpha1
kind: DruidCluster
metadata:
  name: druid
spec:
  image:
    productVersion: {{ test_scenario['values']['druid-latest'] }}
    pullPolicy: IfNotPresent
  clusterConfig:
    authentication:
    - authenticationClass: druid-oidc-auth-class-$NAMESPACE
      oidc:
        clientCredentialsSecret: druid-oidc-client
    listenerClass: external-unstable
    deepStorage:
      s3:
        bucket:
          inline:
            bucketName: druid
            connection:
              inline:
                host: minio-druid
                port: 9000
                accessStyle: Path
                credentials:
                  secretClass: druid-s3-credentials
{% if test_scenario['values']['s3-use-tls'] == 'true' %}
                tls:
                  verification:
                    server:
                      caCert:
                        secretClass: minio-tls-certificates
{% endif %}
        baseKey: deep-storage
    metadataStorageDatabase:
      dbType: derby
      connString: jdbc:derby://localhost:1527/var/druid/metadata.db;create=true
      host: localhost
      port: 1527
    zookeeperConfigMapName: druid-znode
  brokers:
    roleGroups:
      default:
        replicas: 1
  coordinators:
    roleGroups:
      default:
        replicas: 1
  historicals:
    roleGroups:
      default:
        replicas: 1
  middleManagers:
    roleGroups:
      default:
        replicas: 1
  routers:
    roleGroups:
      default:
        replicas: 1
