---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
metadata:
  name: install-druid
timeout: 600
---
apiVersion: druid.stackable.tech/v1alpha1
kind: DruidCluster
metadata:
  name: derby-druid
spec:
  version: {{ test_scenario['values']['druid'] }}
  clusterConfig:
    authorization:
      opa:
        configMapName: test-opa
        package: druid
    deepStorage:
      hdfs:
        configMapName: druid-hdfs
        directory: /druid
    metadataStorageDatabase:
      dbType: derby
      connString: jdbc:derby://localhost:1527/var/druid/metadata.db;create=true
      host: localhost
      port: 1527
    tls: null
    zookeeperConfigMapName: druid-znode
  brokers:
    configOverrides:
      runtime.properties:
        druid.auth.authenticatorChain: "[\"MyBasicMetadataAuthenticator\"]"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.type: basic

        # Default password for 'admin' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialAdminPassword: password1

        # Default password for internal 'druid_system' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialInternalClientPassword: password2

        # Uses the metadata store for storing users, you can use authentication API to create new users and grant permissions
        druid.auth.authenticator.MyBasicMetadataAuthenticator.credentialsValidator.type: metadata

        # If true and the request credential doesn't exists in this credentials store, the request will proceed to next Authenticator in the chain.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.skipOnFailure: "false"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.authorizerName: OpaAuthorizer

        # Escalator
        druid.escalator.type: basic
        druid.escalator.internalClientUsername: druid_system
        druid.escalator.internalClientPassword: password2
        druid.escalator.authorizerName: OpaAuthorizer
    roleGroups:
      default:
        replicas: 1
  coordinators:
    configOverrides:
      runtime.properties:
        druid.auth.authenticatorChain: "[\"MyBasicMetadataAuthenticator\"]"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.type: basic

        # Default password for 'admin' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialAdminPassword: password1

        # Default password for internal 'druid_system' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialInternalClientPassword: password2

        # Uses the metadata store for storing users, you can use authentication API to create new users and grant permissions
        druid.auth.authenticator.MyBasicMetadataAuthenticator.credentialsValidator.type: metadata

        # If true and the request credential doesn't exists in this credentials store, the request will proceed to next Authenticator in the chain.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.skipOnFailure: "false"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.authorizerName: OpaAuthorizer

        # Escalator
        druid.escalator.type: basic
        druid.escalator.internalClientUsername: druid_system
        druid.escalator.internalClientPassword: password2
        druid.escalator.authorizerName: OpaAuthorizer
    roleGroups:
      default:
        replicas: 1
  historicals:
    configOverrides:
      runtime.properties:
        druid.auth.authenticatorChain: "[\"MyBasicMetadataAuthenticator\"]"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.type: basic

        # Default password for 'admin' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialAdminPassword: password1

        # Default password for internal 'druid_system' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialInternalClientPassword: password2

        # Uses the metadata store for storing users, you can use authentication API to create new users and grant permissions
        druid.auth.authenticator.MyBasicMetadataAuthenticator.credentialsValidator.type: metadata

        # If true and the request credential doesn't exists in this credentials store, the request will proceed to next Authenticator in the chain.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.skipOnFailure: "false"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.authorizerName: OpaAuthorizer

        # Escalator
        druid.escalator.type: basic
        druid.escalator.internalClientUsername: druid_system
        druid.escalator.internalClientPassword: password2
        druid.escalator.authorizerName: OpaAuthorizer
    roleGroups:
      default:
        replicas: 1
  middleManagers:
    configOverrides:
      runtime.properties:
        druid.auth.authenticatorChain: "[\"MyBasicMetadataAuthenticator\"]"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.type: basic

        # Default password for 'admin' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialAdminPassword: password1

        # Default password for internal 'druid_system' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialInternalClientPassword: password2

        # Uses the metadata store for storing users, you can use authentication API to create new users and grant permissions
        druid.auth.authenticator.MyBasicMetadataAuthenticator.credentialsValidator.type: metadata

        # If true and the request credential doesn't exists in this credentials store, the request will proceed to next Authenticator in the chain.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.skipOnFailure: "false"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.authorizerName: OpaAuthorizer

        # Escalator
        druid.escalator.type: basic
        druid.escalator.internalClientUsername: druid_system
        druid.escalator.internalClientPassword: password2
        druid.escalator.authorizerName: OpaAuthorizer
    roleGroups:
      default:
        replicas: 1
  routers:
    configOverrides:
      runtime.properties:
        druid.auth.authenticatorChain: "[\"MyBasicMetadataAuthenticator\"]"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.type: basic

        # Default password for 'admin' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialAdminPassword: password1

        # Default password for internal 'druid_system' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialInternalClientPassword: password2

        # Uses the metadata store for storing users, you can use authentication API to create new users and grant permissions
        druid.auth.authenticator.MyBasicMetadataAuthenticator.credentialsValidator.type: metadata

        # If true and the request credential doesn't exists in this credentials store, the request will proceed to next Authenticator in the chain.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.skipOnFailure: "false"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.authorizerName: OpaAuthorizer

        # Escalator
        druid.escalator.type: basic
        druid.escalator.internalClientUsername: druid_system
        druid.escalator.internalClientPassword: password2
        druid.escalator.authorizerName: OpaAuthorizer
    roleGroups:
      default:
        replicas: 1
